author: mongoose-os
description: A Mongoose OS app skeleton
version: 1.0

libs_version: ${mos.version}
modules_version: ${mos.version}
mongoose_os_version: ${mos.version}

# Optional. List of tags for online search.
tags:
  - c

# List of files / directories with C sources. No slashes at the end of dir names.
sources:
  - src

# List of dirs. Files from these dirs will be copied to the device filesystem
filesystem:
  - fs

# Custom configuration entries, settable via "device configuration"
# Below is a custom firmware configuration example.
# Uncomment and modify according to your needs:
config_schema:
  - ["wifi.ap.enable", false]
  - ["wifi.sta.enable", true]
  - ["wifi.sta.ssid", "55D55"]
  - ["wifi.sta.pass", "D#767365"]
  - ["app", "o", {title: "My app custom settings"}]
  - ["app.pin", "i", 5, {title: "GPIO pin a sensor is attached to"}]
  - ["mqtt", "o", {title: "MQTT settings"}]
  - ["mqtt.enable", "b", true, {title: "Enable MQTT"}]
  - ["mqtt.server", "s", "iiot.nodesense.ai:1883", {title: "MQTT server"}]
  - ["mqtt.client_id", "s", "", {title: "ClientID t send to the broker. Defaults to device.id."}]
  - ["mqtt.user", "s", "", {title: "User name"}]
  - ["mqtt.pass", "s", "", {title: "Password"}]
  - ["mqtt.reconnect_timeout_min", "d", 2.0, {title: "Starting reconnect timeout"}]
  - ["mqtt.reconnect_timeout_max", "d", 60.0, {title: "Maximum reconnect timeout"}]
  - ["mqtt.ssl_cert", "s", "", {title: "Client certificate to present to the server"}]
  - ["mqtt.ssl_key", "s", "", {title: "Private key corresponding to the certificate"}]
  - ["mqtt.ssl_ca_cert", "s", "", {title: "Verify server certificate using this CA bundle"}]
  - ["mqtt.ssl_cipher_suites", "s", "", {title: "Cipher suites to offer to the server"}]
  - ["mqtt.ssl_psk_identity", "s", "", {title: "PSK identity (must specify PSK cipher suites)"}]
  - ["mqtt.ssl_psk_key", "s", "", {title: "PSK key"}]
  - ["mqtt.clean_session", "b", true, {title: "Clean Session"}]
  - ["mqtt.keep_alive", "i", 60, {title: "Keep alive interval"}]
  - ["mqtt.will_topic", "s", "", {title: "Will topic"}]
  - ["mqtt.will_message", "s", "", {title: "Will message"}]
  - ["mqtt.max_qos", "i", 2, {title: "Limit QoS of outgoing messages to at most this"}]
  - ["mqtt.recv_mbuf_limit", "i", 3072, {title: "Limit recv buffer size"}]
# config_schema:
#  - ["my_app", "o", {title: "My app custom settings"}]
#  - ["my_app.bool_value", "b", false, {title: "Some boolean value"}]
#  - ["my_app.string_value", "s", "", {title: "Some string value"}]
#  - ["my_app.int_value", "i", 123, {title: "Some integer value"}]

# These settings get compiled into the C structure, and can be accessed
# from the C code this way:
#
# printf("Hello from %s!\n", mgos_sys_config_get_device_id());
#
# Settings are cool: can be modified remotely without full firmware upgrade!
#
# To see all available compiled settings, buid the firmware and open
# build/gen/mgos_config.h file.
#
# Also, in this config_schema section, you can override existing
# settings that has been created by other libraries. For example, debug log
# level is 2 by default. For this firmware we can override it to 3:
#
# config_schema:
#  - ["debug.level", 3]

libs:
  - origin: https://github.com/mongoose-os-libs/boards
  - origin: https://github.com/mongoose-os-libs/ca-bundle
  - origin: https://github.com/mongoose-os-libs/rpc-service-config
  - origin: https://github.com/mongoose-os-libs/rpc-service-fs
  - origin: https://github.com/mongoose-os-libs/rpc-uart
  - origin: https://github.com/mongoose-os-libs/wifi
  - origin: https://github.com/mongoose-os-libs/mjs  
  - origin: https://github.com/mongoose-os-libs/rpc-loopback
  - origin: https://github.com/mongoose-os-libs/mqtt



# <-- Add this line!

# Used by the mos tool to catch mos binaries incompatible with this file format
manifest_version: 2017-09-29
